fisherxu1@gmail.com
docker pull mirrorgooglecontainers/kube-apiserver-amd64:v1.7.5
https://hub.docker.com/r/mirrorgooglecontainers/kube-apiserver-amd64/tags/
docker pull mirrorgooglecontainers/k8s-dns-dnsmasq-nanny-amd64:1.14.4
gen-swagger-docs:v8
docker pull googlecontainer/gen-swagger-docs
Source Synchronizer
Remote Hosts Access
http://licyhust.com/%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/2016/10/06/k8s-api/
https://free.aliyun.com/ntms/free/experience/getTrial.html?spm=5176.7973419.726407.45.7b330314Y0Lqnh
http://www.10tiao.com/html/557/201509/214548448/2.html
chakri-nelluri
https://jicki.me/2017/07/04/kubernetes-1.7.0/
http://ma0921.manlf.cn/app/index.php?jump=1&c=entry&do=show&m=xiaof_toupiao&i=5&sid=14&id=266&wxref=mp.weixin.qq.com&from=timeline&isappinstalled=0

make -j 8 WHAT=test/e2e/e2e.test
_output/bin/e2e.test --host="http://127.0.0.1:8080" --provider="local" --ginkgo.v=true --kubeconfig="$HOME/.kube/config" --repo-root="$GOPATH/src/k8s.io/kubernetes" \--ginkgo.focus="should create and stop a working application"


package main

import (
	"fmt"

	"net"
	"net/http"
	_ "os"
	_ "reflect"
)

type Foo struct {
	X string `json:"x,omitempty"`
	Y *int
}

func (f Foo) Do() *int {
	return f.Y
}

func main() {
	//var i []int = []int{1, 2}
	//i = append(i, 6)
	////var foo Foo
	//var f = &Foo{"", nil}
	//typ := reflect.TypeOf(f)
	////fmt.Println(typ.MethodByName().)
	////fmt.Println(reflect.TypeOf(foo)) //main.Foo
	//
	//fmt.Println(typ)
	//
	//var s = "abc"
	//fmt.Println(reflect.ValueOf(i)) //<int Value>
	//fmt.Println(reflect.ValueOf(f)) //<main.Foo Value>
	//fmt.Println(reflect.ValueOf(s))
	//
	//fmt.Println(os.Hostname())
	//
	//var a interface{} = 1.1
	//v, ok := a.(float64)
	//if !ok {
	//	fmt.Println("failure")
	//	return
	//}
	//fmt.Println("Where are you,Jonny?", v)
	h := http.FileServer(http.Dir("/tmp"))
	l, _ := net.Listen("tcp", getLocalIp()+":0")
	fmt.Println(l.Addr().String())
	err := http.Serve(l, h)
	if err != nil {
		fmt.Println("err", err)
	}
}

type Ts struct {
	URL string
}

func getLocalIp() string {
	var IpAddr string
	ifaces, _ := net.Interfaces()
	for _, iface := range ifaces {
		if iface.Name == "eth0" {
			addrs, _ := iface.Addrs()
			for _, addr := range addrs {
				if ipnet, ok := addr.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {
					if nil != ipnet.IP.To4() {
						IpAddr = ipnet.IP.String()
						return IpAddr
					}
				}
			}
		}
	}
	return ""
}


type Ts struct {
        URL string
}

func (t Ts) Close() {
        return
}

func getLocalIp() string {
        var IpAddr string
        ifaces, _ := net.Interfaces()
        for _, iface := range ifaces {
                if iface.Name == "eth0" {
                        addrs, _ := iface.Addrs()
                        for _, addr := range addrs {
                                if ipnet, ok := addr.(*net.IPNet); ok && !ipnet.IP.IsLoopback() {
                                        if nil != ipnet.IP.To4() {
                                                IpAddr = ipnet.IP.String()
                                                return IpAddr
                                        }
                                }
                        }
                }
        }
        return ""
}

func StartSimpleHttp() Ts {
        h := http.FileServer(http.Dir(strings.Join([]string{TestContext.RepoRoot, "/test/e2e/testing-manifests/process/"}, "")))
        l, _ := net.Listen("tcp", getLocalIp()+":0")
        go http.Serve(l, h)

        ts := Ts{
                URL: l.Addr().String(),
        }
        return ts
}

Nov 13 18:56:47.652: INFO: Failed to get response from guestbook. err: <nil>, response: <br />
<b>Fatal error</b>:  Uncaught exception 'Predis\Connection\ConnectionException' with message 'php_network_getaddresses: getaddrinfo failed: Name or service not known [tcp://:6379]' in /usr/local/lib/php/Predis/Connection/AbstractConnection.php:168
Stack trace:
#0 /usr/local/lib/php/Predis/Connection/StreamConnection.php(97): Predis\Connection\AbstractConnection-&gt;onConnectionError('php_network_get...', 0)
#1 /usr/local/lib/php/Predis/Connection/StreamConnection.php(58): Predis\Connection\StreamConnection-&gt;tcpStreamInitializer(Object(Predis\Connection\Parameters))
#2 /usr/local/lib/php/Predis/Connection/AbstractConnection.php(94): Predis\Connection\StreamConnection-&gt;createResource()
#3 /usr/local/lib/php/Predis/Connection/StreamConnection.php(158): Predis\Connection\AbstractConnection-&gt;connect()
#4 /usr/local/lib/php/Predis/Connection/AbstractConnection.php(193): Predis\Connection\StreamConnection-&gt;connect()
#5 /usr/local/lib/php/Predis/Connection/StreamConnection.php(184): Predis\Connection\AbstractConnection-&gt;getResource()
#6 /us in <b>/usr/local/lib/php/Predis/Connection/AbstractConnection.php</b> on line <b>168</b><br />

Nov 13 18:56:52.677: INFO: Failed to get response from guestbook. err: <nil>, response: <br />
<b>Fatal error</b>:  Uncaught exception 'Predis\Connection\ConnectionException' with message 'php_network_getaddresses: getaddrinfo failed: Name or service not known [tcp://:6379]' in /usr/local/lib/php/Predis/Connection/AbstractConnection.php:168
Stack trace:
#0 /usr/local/lib/php/Predis/Connection/StreamConnection.php(97): Predis\Connection\AbstractConnection-&gt;onConnectionError('php_network_get...', 0)
#1 /usr/local/lib/php/Predis/Connection/StreamConnection.php(58): Predis\Connection\StreamConnection-&gt;tcpStreamInitializer(Object(Predis\Connection\Parameters))
#2 /usr/local/lib/php/Predis/Connection/AbstractConnection.php(94): Predis\Connection\StreamConnection-&gt;createResource()
#3 /usr/local/lib/php/Predis/Connection/StreamConnection.php(158): Predis\Connection\AbstractConnection-&gt;connect()
#4 /usr/local/lib/php/Predis/Connection/AbstractConnection.php(193): Predis\Connection\StreamConnection-&gt;connect()
#5 /usr/local/lib/php/Predis/Connection/StreamConnection.php(184): Predis\Connection\AbstractConnection-&gt;getResource()
#6 /us in <b>/usr/local/lib/php/Predis/Connection/AbstractConnection.php</b> on line <b>168</b><br />
